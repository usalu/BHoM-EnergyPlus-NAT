using System;
using System.ComponentModel;
using System.Globalization;
using BH.oM.Base;
using Newtonsoft.Json;

namespace BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications
{
    [Description(@"This generator model is the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Generator performance curves are generated by fitting catalog data to second order polynomial equations. Three sets of coefficients are required.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_CombustionTurbine : BHoMObject, IEnergyPlusNode
    {
        

        [Description("This will be the main key of this instance. It will be the main key of the serial" +
                     "ization and all other properties will be sub properties of this key.")]
        [JsonProperty(PropertyName="name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeName { get; set; } = "";
        

        [JsonProperty(PropertyName="rated_power_output", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> RatedPowerOutput { get; set; } = null;
        

        [JsonProperty(PropertyName="electric_circuit_node_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElectricCircuitNodeName { get; set; } = "";
        

        [JsonProperty(PropertyName="minimum_part_load_ratio", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> MinimumPartLoadRatio { get; set; } = null;
        

        [JsonProperty(PropertyName="maximum_part_load_ratio", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> MaximumPartLoadRatio { get; set; } = null;
        

        [JsonProperty(PropertyName="optimum_part_load_ratio", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> OptimumPartLoadRatio { get; set; } = null;
        

        [Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output " +
                     "this curve is multiplied to the Temperature Based Fuel Input Curve to determine " +
                     "Fuel Energy In")]
        [JsonProperty(PropertyName="part_load_based_fuel_input_curve_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartLoadBasedFuelInputCurveName { get; set; } = "";
        

        [Description("curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the P" +
                     "art Load Based Fuel Input Curve to determine Fuel Energy In")]
        [JsonProperty(PropertyName="temperature_based_fuel_input_curve_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemperatureBasedFuelInputCurveName { get; set; } = "";
        

        [Description("curve = a + b*AT + c*AT**2 AT = Ambient Delta T")]
        [JsonProperty(PropertyName="exhaust_flow_curve_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExhaustFlowCurveName { get; set; } = "";
        

        [Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output " +
                     "this curve is multiplied to the Temperature Based Exhaust Temperature Curve to d" +
                     "etermine Exhaust Temperature")]
        [JsonProperty(PropertyName="part_load_based_exhaust_temperature_curve_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartLoadBasedExhaustTemperatureCurveName { get; set; } = "";
        

        [Description("curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the P" +
                     "art Load Based Exhaust Temperature Curve to determine Exhaust Temperature")]
        [JsonProperty(PropertyName="temperature_based_exhaust_temperature_curve_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemperatureBasedExhaustTemperatureCurveName { get; set; } = "";
        

        [Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
        [JsonProperty(PropertyName="heat_recovery_lube_energy_curve_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeatRecoveryLubeEnergyCurveName { get; set; } = "";
        

        [Description("curve = C1 * Rated Power Output**C2")]
        [JsonProperty(PropertyName="coefficient_1_of_u_factor_times_area_curve", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> Coefficient1OfUFactorTimesAreaCurve { get; set; } = null;
        

        [Description("curve = C1 * Rated Power Output**C2 typical value .9")]
        [JsonProperty(PropertyName="coefficient_2_of_u_factor_times_area_curve", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> Coefficient2OfUFactorTimesAreaCurve { get; set; } = null;
        

        [JsonProperty(PropertyName="maximum_exhaust_flow_per_unit_of_power_output", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = null;
        

        [JsonProperty(PropertyName="design_minimum_exhaust_temperature", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> DesignMinimumExhaustTemperature { get; set; } = null;
        

        [JsonProperty(PropertyName="design_air_inlet_temperature", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> DesignAirInletTemperature { get; set; } = null;
        

        [JsonProperty(PropertyName="fuel_higher_heating_value", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> FuelHigherHeatingValue { get; set; } = null;
        

        [Description("if non-zero, then inlet, outlet nodes must be entered.")]
        [JsonProperty(PropertyName="design_heat_recovery_water_flow_rate", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> DesignHeatRecoveryWaterFlowRate { get; set; } = Double.Parse("0", CultureInfo.InvariantCulture);
        

        [JsonProperty(PropertyName="heat_recovery_inlet_node_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeatRecoveryInletNodeName { get; set; } = "";
        

        [JsonProperty(PropertyName="heat_recovery_outlet_node_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeatRecoveryOutletNodeName { get; set; } = "";
        

        [JsonProperty(PropertyName="fuel_type", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Generator_CombustionTurbine_FuelType FuelType { get; set; } = (Generator_CombustionTurbine_FuelType)Enum.Parse(typeof(Generator_CombustionTurbine_FuelType), "NaturalGas");
        

        [JsonProperty(PropertyName="heat_recovery_maximum_temperature", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Nullable<double> HeatRecoveryMaximumTemperature { get; set; } = Double.Parse("80", CultureInfo.InvariantCulture);
        

        [Description("Enter the name of an outdoor air node")]
        [JsonProperty(PropertyName="outdoor_air_inlet_node_name", NullValueHandling=Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutdoorAirInletNodeName { get; set; } = "";
    }
}